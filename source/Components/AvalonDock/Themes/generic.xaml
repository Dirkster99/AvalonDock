<!--
	************************************************************************
	AvalonDock
	
	Copyright (C) 2007-2013 Xceed Software Inc.
	
	This program is provided to you under the terms of the Microsoft Public
	License (Ms-PL) as published at https://opensource.org/licenses/MS-PL
	************************************************************************
-->

<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:avalonDock="clr-namespace:AvalonDock"
	xmlns:avalonDockControls="clr-namespace:AvalonDock.Controls"
	xmlns:avalonDockConverters="clr-namespace:AvalonDock.Converters"
	xmlns:avalonDockLayout="clr-namespace:AvalonDock.Layout"
	xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties"
	xmlns:shell="clr-namespace:Microsoft.Windows.Shell">

	<!--  DocumentPaneControlStyle  -->
	<Style x:Key="DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
					<Grid
						ClipToBounds="true"
						KeyboardNavigation.TabNavigation="Local"
						SnapsToDevicePixels="true">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<!--  Following border is required to catch mouse events  -->
						<Border Grid.RowSpan="2" Background="Transparent" />
						<Grid Panel.ZIndex="1" Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type avalonDockControls:LayoutDocumentPaneControl}}, Path=Model.ShowHeader, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<avalonDockControls:DocumentPaneTabPanel
								x:Name="HeaderPanel"
								Grid.Row="0"
								Grid.Column="0"
								IsItemsHost="true"
								KeyboardNavigation.TabIndex="1" />
							<avalonDockControls:DropDownButton
								x:Name="MenuDropDownButton"
								Grid.Column="1"
								Focusable="False"
								Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}">
								<avalonDockControls:DropDownButton.DropDownContextMenu>
									<avalonDockControls:ContextMenuEx ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
										<avalonDockControls:ContextMenuEx.ItemContainerStyle>
											<Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type avalonDockControls:MenuItemEx}">
												<Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}" />
												<Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}" />
												<Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}" />
												<Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}" />
												<Setter Property="Command" Value="{Binding Path=., Converter={avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter}}" />
											</Style>
										</avalonDockControls:ContextMenuEx.ItemContainerStyle>
									</avalonDockControls:ContextMenuEx>
								</avalonDockControls:DropDownButton.DropDownContextMenu>
								<Border Background="White">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/PinDocMenu.png" />
								</Border>
							</avalonDockControls:DropDownButton>
						</Grid>
						<Border
							x:Name="ContentPanel"
							Grid.Row="1"
							Grid.Column="0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Cycle">
							<ContentPresenter
								x:Name="PART_SelectedContentHost"
								Margin="{TemplateBinding Padding}"
								ContentSource="SelectedContent"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
							<Setter TargetName="MenuDropDownButton" Property="Visibility" Value="Collapsed" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type TabItem}">
					<Setter Property="Visibility" Value="{Binding IsVisible, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
					<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
					<Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
					<Setter Property="ToolTip" Value="{Binding ToolTip}" />
					<Setter Property="Padding" Value="2,0,2,0" />
					<Setter Property="Margin" Value="0,2,0,0" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type TabItem}">
								<Grid SnapsToDevicePixels="true">

									<Border
										x:Name="Bd"
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="1,1,1,0">
										<ContentPresenter
											x:Name="Content"
											HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											ContentSource="Header"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="Selector.IsSelected" Value="true">
										<Setter Property="Background" Value="White" />
										<Setter Property="Panel.ZIndex" Value="1" />
										<Setter Property="Margin" Value="0,0,0,-2" />
										<Setter TargetName="Content" Property="Margin" Value="0,0,0,3" />
									</Trigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="IsMouseOver" Value="true" />
											<Condition Property="Selector.IsSelected" Value="false" />
										</MultiTrigger.Conditions>
										<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}" />
										<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
										<Setter Property="Panel.ZIndex" Value="0" />
									</MultiTrigger>
									<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<avalonDockControls:LayoutDocumentTabItem Model="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<avalonDockControls:LayoutDocumentControl Model="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  AnchorablePaneControlStyle  -->
	<Style x:Key="AnchorablePaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
		<Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
		<Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
		<Setter Property="TabStripPlacement" Value="Bottom" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
					<Grid
						ClipToBounds="true"
						KeyboardNavigation.TabNavigation="Local"
						SnapsToDevicePixels="true">
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<!--  Following border is required to catch mouse events  -->
						<Border Grid.RowSpan="2" Background="Transparent" />
						<Border
							x:Name="ContentPanel"
							Grid.Row="0"
							Grid.Column="0"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Cycle">
							<ContentPresenter
								x:Name="PART_SelectedContentHost"
								Margin="{TemplateBinding Padding}"
								ContentSource="SelectedContent"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<avalonDockControls:AnchorablePaneTabPanel
							x:Name="HeaderPanel"
							Grid.Row="1"
							Margin="2,0,2,2"
							Panel.ZIndex="1"
							IsItemsHost="true"
							KeyboardNavigation.TabIndex="1" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type TabItem}">
					<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
					<Setter Property="IsEnabled" Value="{Binding IsEnabled}" />
					<Setter Property="ToolTip" Value="{Binding ToolTip}" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type TabItem}">
								<Grid SnapsToDevicePixels="true">
									<Border
										x:Name="Bd"
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="1,0,1,1">
										<ContentPresenter
											x:Name="Content"
											HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
											ContentSource="Header"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="Selector.IsSelected" Value="true">
										<Setter Property="Background" Value="White" />
										<Setter Property="Panel.ZIndex" Value="1" />
										<Setter Property="Margin" Value="0,-1,-1,-2" />
									</Trigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="IsMouseOver" Value="true" />
											<Condition Property="Selector.IsSelected" Value="false" />
										</MultiTrigger.Conditions>
										<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}" />
										<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
										<Setter Property="Panel.ZIndex" Value="0" />
									</MultiTrigger>
									<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Style.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count, FallbackValue=1}" Value="1">
							<Setter Property="Visibility" Value="Collapsed" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Setter.Value>
		</Setter>

		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<avalonDockControls:LayoutAnchorableTabItem Model="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<avalonDockControls:LayoutAnchorableControl Model="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="avalonDockControls:AnchorablePaneTitle">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
								<ContentPresenter
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
							</avalonDockControls:DropDownControlArea>

							<avalonDockControls:DropDownButton
								Grid.Column="1"
								DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
								DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
								Focusable="False"
								Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
								ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
								<Border Background="Transparent">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/PinMenu.png" />
								</Border>
							</avalonDockControls:DropDownButton>

							<Button
								x:Name="PART_AutoHidePin"
								Grid.Column="2"
								Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}"
								Focusable="False"
								Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
								ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
								Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
								<Border Background="Transparent">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/PinAutoHide.png" />
								</Border>
							</Button>

							<Button
								x:Name="PART_HidePin"
								Grid.Column="3"
								Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}"
								Focusable="False"
								Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
								ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
								Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
								<Border Background="Transparent">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/PinClose.png" />
								</Border>
							</Button>


						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
							<Setter TargetName="PART_AutoHidePin" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="90" />
								</Setter.Value>
							</Setter>
						</DataTrigger>
						<DataTrigger Binding="{Binding Model.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
							<Setter TargetName="PART_HidePin" Property="Command" Value="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="PART_HidePin" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />

						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<ControlTemplate x:Key="AnchorSideTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorSideControl}">
		<ItemsControl Background="{TemplateBinding Background}" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
			<ItemsControl.ItemsPanel>
				<ItemsPanelTemplate>
					<StackPanel Orientation="{Binding Path=Model.Side, RelativeSource={RelativeSource AncestorType={x:Type avalonDockControls:LayoutAnchorSideControl}, Mode=FindAncestor}, Converter={avalonDockConverters:AnchorSideToOrientationConverter}}" />
				</ItemsPanelTemplate>
			</ItemsControl.ItemsPanel>
		</ItemsControl>
	</ControlTemplate>

	<ControlTemplate x:Key="AnchorGroupTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorGroupControl}">
		<ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Children}">
			<ItemsControl.LayoutTransform>
				<RotateTransform Angle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Model.Parent.Side, Converter={avalonDockConverters:AnchorSideToAngleConverter}}" />
			</ItemsControl.LayoutTransform>
			<ItemsControl.ItemsPanel>
				<ItemsPanelTemplate>
					<StackPanel Orientation="Horizontal" />
				</ItemsPanelTemplate>
			</ItemsControl.ItemsPanel>
		</ItemsControl>
	</ControlTemplate>

	<ControlTemplate x:Key="AnchorTemplate" TargetType="{x:Type avalonDockControls:LayoutAnchorControl}">
		<Border
			Margin="2"
			Padding="2"
			BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
			BorderThickness="1">
			<ContentPresenter
				Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
				ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
				ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
		</Border>
	</ControlTemplate>

	<Style x:Key="{x:Type avalonDockControls:OverlayWindow}" TargetType="{x:Type avalonDockControls:OverlayWindow}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:OverlayWindow}">
					<Canvas x:Name="PART_DropTargetsContainer" Opacity="0.9">
						<Path
							x:Name="PART_PreviewBox"
							Fill="AliceBlue"
							Stroke="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
							StrokeThickness="2" />
						<Grid x:Name="PART_DockingManagerDropTargets">
							<Image
								x:Name="PART_DockingManagerDropTargetLeft"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Source="/AvalonDock;component/Themes/Generic/Images/DockLeft.PNG"
								Stretch="None" />
							<Image
								x:Name="PART_DockingManagerDropTargetRight"
								HorizontalAlignment="Right"
								VerticalAlignment="Center"
								Source="/AvalonDock;component/Themes/Generic/Images/DockRight.PNG"
								Stretch="None" />
							<Image
								x:Name="PART_DockingManagerDropTargetBottom"
								HorizontalAlignment="Center"
								VerticalAlignment="Bottom"
								Source="/AvalonDock;component/Themes/Generic/Images/DockBottom.PNG"
								Stretch="None" />
							<Image
								x:Name="PART_DockingManagerDropTargetTop"
								HorizontalAlignment="Center"
								VerticalAlignment="Top"
								Source="/AvalonDock;component/Themes/Generic/Images/DockTop.PNG"
								Stretch="None" />
						</Grid>
						<Grid x:Name="PART_AnchorablePaneDropTargets">
							<Grid
								Width="88"
								Height="88"
								HorizontalAlignment="Center"
								VerticalAlignment="Center">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
								</Grid.RowDefinitions>
								<Image
									Grid.RowSpan="3"
									Grid.ColumnSpan="3"
									Source="/AvalonDock;component/Themes/Generic/Images/DockPaneEmpty.PNG"
									Stretch="Uniform" />
								<Border
									Name="PART_AnchorablePaneDropTargetTop"
									Grid.Row="0"
									Grid.Column="1">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneTop.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_AnchorablePaneDropTargetRight"
									Grid.Row="1"
									Grid.Column="2">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneRight.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_AnchorablePaneDropTargetBottom"
									Grid.Row="2"
									Grid.Column="1">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneBottom.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_AnchorablePaneDropTargetLeft"
									Grid.Row="1"
									Grid.Column="0">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneLeft.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_AnchorablePaneDropTargetInto"
									Grid.Row="1"
									Grid.Column="1">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneInside.png" Stretch="None" />
								</Border>
							</Grid>
						</Grid>
						<Grid x:Name="PART_DocumentPaneDropTargets">
							<Grid
								Width="88"
								Height="88"
								HorizontalAlignment="Center"
								VerticalAlignment="Center">
								<Grid.ColumnDefinitions>
									<ColumnDefinition />
									<ColumnDefinition />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition />
									<RowDefinition />
									<RowDefinition />
								</Grid.RowDefinitions>
								<Image
									Grid.RowSpan="3"
									Grid.ColumnSpan="3"
									Source="/AvalonDock;component/Themes/Generic/Images/DockPaneEmpty.PNG"
									Stretch="Uniform" />
								<Border
									Name="PART_DocumentPaneDropTargetTop"
									Grid.Row="0"
									Grid.Column="1">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneTop.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_DocumentPaneDropTargetRight"
									Grid.Row="1"
									Grid.Column="2">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneRight.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_DocumentPaneDropTargetBottom"
									Grid.Row="2"
									Grid.Column="1">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneBottom.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_DocumentPaneDropTargetLeft"
									Grid.Row="1"
									Grid.Column="0">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockDocPaneLeft.png" Stretch="None" />
								</Border>
								<Border
									Name="PART_DocumentPaneDropTargetInto"
									Grid.Row="1"
									Grid.Column="1">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/InnerDockPaneInside.png" Stretch="None" />
								</Border>
							</Grid>
						</Grid>
					</Canvas>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<DataTemplate x:Key="DocumentHeaderTemplate">
		<TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
	</DataTemplate>

	<DataTemplate x:Key="AnchorableHeaderTemplate">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition />
			</Grid.ColumnDefinitions>
			<Image
				x:Name="icon"
				Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}"
				Stretch="Uniform" />
			<TextBlock
				x:Name="title"
				Grid.Column="1"
				Margin="4,0,0,0"
				Text="{Binding Title}"
				TextTrimming="CharacterEllipsis" />
		</Grid>
		<DataTemplate.Triggers>
			<DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
				<Setter TargetName="title" Property="Margin" Value="0" />
			</DataTrigger>
		</DataTemplate.Triggers>
	</DataTemplate>

	<DataTemplate x:Key="DocumentTitleTemplate">
		<TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
	</DataTemplate>

	<DataTemplate x:Key="AnchorableTitleTemplate">
		<TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" />
	</DataTemplate>

	<DataTemplate x:Key="IconContentTemplate">
		<Image Source="{Binding IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="Uniform" />
	</DataTemplate>

	<ContextMenu x:Key="AnchorableContextMenu">
		<MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Float}" />
		<MenuItem Command="{Binding Path=DockCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Dock}" />
		<MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_DockAsDocument}" />
		<MenuItem Command="{Binding Path=AutoHideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_AutoHide}" />
		<MenuItem
			Command="{Binding Path=CloseCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_Close}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
		<MenuItem Command="{Binding Path=HideCommand}" Header="{x:Static avalonDockProperties:Resources.Anchorable_Hide}">
			<MenuItem.Visibility>
				<MultiBinding Converter="{avalonDockConverters:AnchorableContextMenuHideVisibilityConverter}">
					<Binding
						Converter="{avalonDockConverters:BoolToVisibilityConverter}"
						Mode="OneWay"
						Path="IsEnabled"
						RelativeSource="{RelativeSource Self}" />
					<Binding Path="CanClose" />
				</MultiBinding>
			</MenuItem.Visibility>
		</MenuItem>
	</ContextMenu>

	<ContextMenu x:Key="DocumentContextMenu">
		<MenuItem
			Command="{Binding Path=CloseCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_Close}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
		<MenuItem Command="{Binding Path=CloseAllButThisCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" />
		<MenuItem Command="{Binding Path=CloseAllCommand}" Header="{x:Static avalonDockProperties:Resources.Document_CloseAll}" />
		<MenuItem Command="{Binding Path=FloatCommand}" Header="{x:Static avalonDockProperties:Resources.Document_Float}" />
		<MenuItem Command="{Binding Path=DockAsDocumentCommand}" Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" />
		<MenuItem
			Command="{Binding Path=NewHorizontalTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
		<MenuItem
			Command="{Binding Path=NewVerticalTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_NewVerticalTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
		<MenuItem
			Command="{Binding Path=MoveToNextTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_MoveToNextTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
		<MenuItem
			Command="{Binding Path=MoveToPreviousTabGroupCommand}"
			Header="{x:Static avalonDockProperties:Resources.Document_MoveToPreviousTabGroup}"
			Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}" />
	</ContextMenu>

	<!--  DockingManager  -->
	<Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
		<Setter Property="DocumentPaneControlStyle" Value="{StaticResource DocumentPaneControlStyle}" />
		<Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AnchorablePaneControlStyle}" />
		<Setter Property="AnchorSideTemplate" Value="{StaticResource AnchorSideTemplate}" />
		<Setter Property="AnchorGroupTemplate" Value="{StaticResource AnchorGroupTemplate}" />
		<Setter Property="AnchorTemplate" Value="{StaticResource AnchorTemplate}" />
		<Setter Property="DocumentHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}" />
		<Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AnchorableHeaderTemplate}" />
		<Setter Property="DocumentTitleTemplate" Value="{StaticResource DocumentTitleTemplate}" />
		<Setter Property="AnchorableTitleTemplate" Value="{StaticResource AnchorableTitleTemplate}" />
		<Setter Property="AnchorableContextMenu" Value="{StaticResource AnchorableContextMenu}" />
		<Setter Property="DocumentContextMenu" Value="{StaticResource DocumentContextMenu}" />
		<Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}" />
		<Setter Property="IconContentTemplate" Value="{StaticResource IconContentTemplate}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid FlowDirection="LeftToRight">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ContentPresenter
								Grid.Row="1"
								Grid.Column="1"
								Content="{TemplateBinding LayoutRootPanel}" />
							<ContentPresenter
								Grid.Row="0"
								Grid.RowSpan="3"
								Grid.Column="2"
								Content="{TemplateBinding RightSidePanel}" />
							<ContentPresenter
								Grid.Row="0"
								Grid.RowSpan="3"
								Grid.Column="0"
								Content="{TemplateBinding LeftSidePanel}" />
							<ContentPresenter
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="3"
								Content="{TemplateBinding TopSidePanel}" />
							<ContentPresenter
								Grid.Row="2"
								Grid.Column="0"
								Grid.ColumnSpan="3"
								Content="{TemplateBinding BottomSidePanel}" />
							<ContentPresenter
								x:Name="PART_AutoHideArea"
								Grid.Row="1"
								Grid.Column="1"
								HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
								VerticalAlignment="{TemplateBinding VerticalAlignment}"
								Content="{TemplateBinding AutoHideWindow}" />
							<!--    -->
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  LayoutGridResizerControl  -->
	<Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
					<Border Background="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentControl}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter
							Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
							ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
							ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
					<avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
						<Border
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Border Grid.ColumnSpan="3" Background="Transparent" />
								<ContentPresenter
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
									ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />

								<Button
									x:Name="DocumentCloseButton"
									Grid.Column="2"
									Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
									ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
									Visibility="Hidden">
									<Image Source="/AvalonDock;component/Themes/Generic/Images/PinClose.png" />
								</Button>
							</Grid>
						</Border>
					</avalonDockControls:DropDownControlArea>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsSelected}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Visible" />
						</MultiDataTrigger>
						<!--BD: 17.08.2020 use HideCommand if CanClose=false but CanHide=true-->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=CanClose}" Value="false" />
								<Condition Binding="{Binding Path=CanHide}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="DocumentCloseButton" Property="Command" Value="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="DocumentCloseButton" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Anchorable_Hide}" />
						</MultiDataTrigger>
						<!--BD: 17.08.2020 hide button if both CanClose=false and CanHide=false-->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=CanClose}" Value="false" />
								<Condition Binding="{Binding Path=CanHide}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="DocumentCloseButton" Property="Visibility" Value="Collapsed" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableTabItem}">
					<avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Root.Manager.AnchorableContextMenu}" DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
						<Border
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Grid>
								<ContentPresenter
									Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
									ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
									ContentTemplateSelector="{Binding AnchorableHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}" />
								<avalonDockControls:DropDownControlArea
									Grid.Column="0"
									DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
									DropDownContextMenuDataContext="{Binding Path=Model, RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid>
						</Border>
					</avalonDockControls:DropDownControlArea>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						KeyboardNavigation.TabNavigation="Cycle">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<Border x:Name="Header">
								<avalonDockControls:AnchorablePaneTitle Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
							</Border>

							<!--
								Added ContentTemplate and ContentTemplateSelector
								https://github.com/xceedsoftware/wpftoolkit/issues/1525
							-->
							<ContentPresenter
								Grid.Row="1"
								Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
								FlowDirection="{TemplateBinding FlowDirection}" />

							<!--<ContentPresenter
                                FlowDirection="{TemplateBinding FlowDirection}"
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>-->
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<!--
								Hide the title if the control is directly hosted in floating window
								The floating window control will show the title if there is only one control to host
								without any other LayoutAnchorableControl
							-->
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<!--
								Also hide the title, if model cannot be bound which can happen when using virtualization
								See Issue #148 Drop Down Menu for LayoutAnchorables is not correct with Virtualization
							-->
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model}" Value="{x:Null}" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
		<Setter Property="BorderThickness" Value="3" />
		<Setter Property="shell:WindowChrome.WindowChrome">
			<Setter.Value>
				<shell:WindowChrome
					CaptionHeight="16"
					CornerRadius="3,3,3,3"
					GlassFrameThickness="0"
					ResizeBorderThickness="10"
					ShowSystemMenu="False" />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentFloatingWindowControl}">
					<Grid>
						<Border
							x:Name="WindowBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Grid Margin="3">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" MinHeight="16" />
									<!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>
								<Grid UseLayoutRounding="True">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Border Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
										<avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.DocumentContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
											<ContentPresenter
												Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplate="{Binding Model.Root.Manager.DocumentTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplateSelector="{Binding Model.Root.Manager.DocumentTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
										</avalonDockControls:DropDownControlArea>
									</Border>
									<Button
										Grid.Column="1"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
										<Image Source="/AvalonDock;component/Themes/Generic/Images/PinMaximize.png" />
									</Button>

									<Button
										Grid.Column="1"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
										<Image Source="/AvalonDock;component/Themes/Generic/Images/PinRestore.png" />
									</Button>

									<Button
										Grid.Column="2"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{Binding Path=CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
										ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}"
										Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
										<Image Source="/AvalonDock;component/Themes/Generic/Images/PinClose.png" />
									</Button>
								</Grid>
								<ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="WindowState" Value="Maximized">
							<Setter TargetName="WindowBorder" Property="Padding" Value="3" />
						</Trigger>
						<DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter TargetName="WindowBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
		<Setter Property="BorderThickness" Value="3" />
		<Setter Property="shell:WindowChrome.WindowChrome">
			<Setter.Value>
				<shell:WindowChrome
					CaptionHeight="16"
					CornerRadius="3,3,3,3"
					GlassFrameThickness="0"
					ResizeBorderThickness="10"
					ShowSystemMenu="False" />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableFloatingWindowControl}">
					<Grid>
						<Border
							x:Name="WindowBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Grid Margin="3">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" MinHeight="16" />
									<!--  https://github.com/xceedsoftware/wpftoolkit/issues/1203  -->
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>
								<Grid UseLayoutRounding="True">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>

									<Border Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
										<avalonDockControls:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}" DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
											<ContentPresenter
												Content="{Binding Model.SinglePane.SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
												ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
										</avalonDockControls:DropDownControlArea>
									</Border>


									<avalonDockControls:DropDownButton
										x:Name="SinglePaneContextMenu"
										Grid.Column="1"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
										DropDownContextMenuDataContext="{Binding Path=SingleContentLayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
										ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}"
										Visibility="{Binding Path=Model.IsSinglePane, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
										<Image Source="/AvalonDock;component/Themes/Generic/Images/PinMenu.png" />
									</avalonDockControls:DropDownButton>

									<Button
										Grid.Column="2"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.MaximizeWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Maximize}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:InverseBoolToVisibilityConverter}}">
										<Image Source="/AvalonDock;component/Themes/Generic/Images/PinMaximize.png" />
									</Button>

									<Button
										Grid.Column="2"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{x:Static shell:SystemCommands.RestoreWindowCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
										ToolTip="{x:Static avalonDockProperties:Resources.Window_Restore}"
										Visibility="{Binding IsMaximized, RelativeSource={RelativeSource TemplatedParent}, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
										<Image Source="/AvalonDock;component/Themes/Generic/Images/PinRestore.png" />
									</Button>

									<Button
										x:Name="CloseButton"
										Grid.Column="3"
										shell:WindowChrome.IsHitTestVisibleInChrome="True"
										Command="{Binding HideWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
										Focusable="False"
										Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
										ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
										Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={avalonDockConverters:BoolToVisibilityConverter}}">
										<Image Source="/AvalonDock;component/Themes/Generic/Images/PinClose.png" />
									</Button>
								</Grid>
								<ContentPresenter Grid.Row="1" Content="{TemplateBinding Content}" />
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="WindowState" Value="Maximized">
							<Setter TargetName="WindowBorder" Property="Padding" Value="3" />
						</Trigger>
						<DataTrigger Binding="{Binding Model.SinglePane.SelectedContent.IsActive, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter TargetName="WindowBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Model.SinglePane.SelectedContent.CanClose, RelativeSource={RelativeSource Mode=Self}}" Value="True">
							<Setter TargetName="CloseButton" Property="Command" Value="{Binding CloseWindowCommand, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="CloseButton" Property="ToolTip" Value="{x:Static avalonDockProperties:Resources.Document_Close}" />

						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type avalonDockControls:LayoutAutoHideWindowControl}" TargetType="{x:Type avalonDockControls:LayoutAutoHideWindowControl}">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
	</Style>

	<Style x:Key="{x:Type avalonDockControls:NavigatorWindow}" TargetType="{x:Type avalonDockControls:NavigatorWindow}">
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="SizeToContent" Value="WidthAndHeight" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="shell:WindowChrome.WindowChrome">
			<Setter.Value>
				<shell:WindowChrome
					CaptionHeight="16"
					CornerRadius="3,3,3,3"
					GlassFrameThickness="4"
					ResizeBorderThickness="10" />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:NavigatorWindow}">
					<Grid>
						<Border
							x:Name="WindowBorder"
							Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
							BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
							BorderThickness="3">
							<Grid Margin="5">
								<Grid.RowDefinitions>
									<RowDefinition MinHeight="54" />
									<RowDefinition Height="*" />
									<RowDefinition MinHeight="42" />
								</Grid.RowDefinitions>

								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition />
										<RowDefinition />
									</Grid.RowDefinitions>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition />
										</Grid.ColumnDefinitions>
										<Image Source="{Binding SelectedDocument.LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
										<TextBlock
											x:Name="selectedElementTitle"
											Grid.Column="1"
											Margin="4,0,0,0"
											VerticalAlignment="Center"
											FontWeight="Bold"
											Text="{Binding SelectedDocument.LayoutElement.Title}"
											TextTrimming="CharacterEllipsis" />
									</Grid>
									<TextBlock
										x:Name="selectedElementDescription"
										VerticalAlignment="Center"
										Text="{Binding SelectedDocument.LayoutElement.Description}"
										TextTrimming="CharacterEllipsis" />
								</Grid>

								<Grid Grid.Row="1">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<Grid Margin="5">
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition />
										</Grid.RowDefinitions>
										<TextBlock
											Margin="0,3,0,4"
											FontWeight="Bold"
											Text="{x:Static avalonDockProperties:Resources.Active_ToolWindows}" />
										<ListBox
											x:Name="PART_AnchorableListBox"
											Grid.Row="1"
											MaxHeight="400"
											Background="Transparent"
											BorderThickness="0"
											FocusVisualStyle="{x:Null}"
											ItemsSource="{Binding Anchorables}"
											SelectedItem="{Binding SelectedAnchorable, Mode=TwoWay}">
											<ListBox.ItemContainerStyle>
												<Style TargetType="ListBoxItem">
													<Setter Property="Cursor" Value="Hand" />
													<Style.Triggers>
														<Trigger Property="IsMouseOver" Value="True">
															<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
															<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														</Trigger>
													</Style.Triggers>
												</Style>
											</ListBox.ItemContainerStyle>
											<ListBox.ItemTemplate>
												<DataTemplate>
													<Grid>
														<Grid.ColumnDefinitions>
															<ColumnDefinition Width="Auto" />
															<ColumnDefinition />
														</Grid.ColumnDefinitions>
														<Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
														<TextBlock
															Grid.Column="1"
															Margin="4,2,0,2"
															Text="{Binding LayoutElement.Title}"
															TextTrimming="CharacterEllipsis" />
													</Grid>
												</DataTemplate>
											</ListBox.ItemTemplate>
										</ListBox>
									</Grid>
									<Grid Grid.Column="1" Margin="5">
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition />
										</Grid.RowDefinitions>
										<TextBlock
											Margin="0,3,0,4"
											FontWeight="Bold"
											Text="{x:Static avalonDockProperties:Resources.Active_Files}" />
										<ListBox
											x:Name="PART_DocumentListBox"
											Grid.Row="1"
											MaxHeight="400"
											Background="Transparent"
											BorderThickness="0"
											FocusVisualStyle="{x:Null}"
											ItemsSource="{Binding Documents}"
											SelectedItem="{Binding SelectedDocument, Mode=TwoWay}">
											<ListBox.ItemContainerStyle>
												<Style TargetType="ListBoxItem">
													<Setter Property="Cursor" Value="Hand" />
													<Style.Triggers>
														<Trigger Property="IsMouseOver" Value="True">
															<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
															<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
														</Trigger>
													</Style.Triggers>
												</Style>
											</ListBox.ItemContainerStyle>
											<ListBox.ItemTemplate>
												<DataTemplate>
													<Grid>
														<Grid.ColumnDefinitions>
															<ColumnDefinition Width="Auto" />
															<ColumnDefinition />
														</Grid.ColumnDefinitions>
														<Image Source="{Binding LayoutElement.IconSource, Converter={avalonDockConverters:NullToDoNothingConverter}}" Stretch="None" />
														<TextBlock
															Grid.Column="1"
															Margin="4,2,0,2"
															Text="{Binding LayoutElement.Title}"
															TextTrimming="CharacterEllipsis" />
													</Grid>
												</DataTemplate>
											</ListBox.ItemTemplate>
											<ListBox.ItemsPanel>
												<ItemsPanelTemplate>
													<WrapPanel Orientation="Vertical" />
												</ItemsPanelTemplate>
											</ListBox.ItemsPanel>
										</ListBox>
									</Grid>
								</Grid>

								<Grid Grid.Row="2">
									<TextBlock VerticalAlignment="Center" Text="{Binding SelectedDocument.LayoutElement.ToolTip}" />
								</Grid>
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="SelectedDocument" Value="{x:Null}">
							<Setter TargetName="selectedElementTitle" Property="Text" Value="{Binding SelectedAnchorable.LayoutElement.Title}" />
							<Setter TargetName="selectedElementDescription" Property="Text" Value="{x:Null}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

</ResourceDictionary>
